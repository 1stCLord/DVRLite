/* soapPullPointSubscriptionBindingService.cpp
   Generated by gSOAP 2.8.55 for generated.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapPullPointSubscriptionBindingService.h"

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService(const PullPointSubscriptionBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	PullPointSubscriptionBindingService_init(_soap->imode, _soap->omode);
}

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingService_init(iomode, iomode);
}

PullPointSubscriptionBindingService::PullPointSubscriptionBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	PullPointSubscriptionBindingService_init(imode, omode);
}

PullPointSubscriptionBindingService::~PullPointSubscriptionBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void PullPointSubscriptionBindingService::PullPointSubscriptionBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
        {"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
        {"saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL},
        {"saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL},
        {"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
        {"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
        {"wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", NULL, NULL},
        {"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
        {"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
        {"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
        {"wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
        {"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
        {"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
        {"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
        {"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
        {"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
        {"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
        {"tad", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL},
        {"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
        {"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
        {"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
        {"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
        {"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
        {"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
        {"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
        {"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
        {"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
        {"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
        {"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
        {"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void PullPointSubscriptionBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void PullPointSubscriptionBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	PullPointSubscriptionBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
PullPointSubscriptionBindingService *PullPointSubscriptionBindingService::copy()
{	PullPointSubscriptionBindingService *dup = SOAP_NEW_COPY(PullPointSubscriptionBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

PullPointSubscriptionBindingService& PullPointSubscriptionBindingService::operator=(const PullPointSubscriptionBindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int PullPointSubscriptionBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int PullPointSubscriptionBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int PullPointSubscriptionBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int PullPointSubscriptionBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int PullPointSubscriptionBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int PullPointSubscriptionBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void PullPointSubscriptionBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void PullPointSubscriptionBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *PullPointSubscriptionBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void PullPointSubscriptionBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void PullPointSubscriptionBindingService::soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence)
{	::soap_header(this->soap);
	this->soap->header->wsse__Security = wsse__Security;
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
}

::SOAP_ENV__Header *PullPointSubscriptionBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int PullPointSubscriptionBindingService::run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int PullPointSubscriptionBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET PullPointSubscriptionBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET PullPointSubscriptionBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int PullPointSubscriptionBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int PullPointSubscriptionBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tev__PullMessages(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Seek(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__SetSynchronizationPoint(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Unsubscribe(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__GetServiceCapabilities(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__CreatePullPointSubscription(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__GetEventProperties(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Renew(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Unsubscribe_(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Subscribe(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__GetCurrentMessage(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Notify(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__GetMessages(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__DestroyPullPoint(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Notify_(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__CreatePullPoint(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Renew_(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__Unsubscribe__(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__PauseSubscription(struct soap*, PullPointSubscriptionBindingService*);
static int serve___tev__ResumeSubscription(struct soap*, PullPointSubscriptionBindingService*);

int PullPointSubscriptionBindingService::dispatch()
{	return dispatch(this->soap);
}

int PullPointSubscriptionBindingService::dispatch(struct soap* soap)
{
	PullPointSubscriptionBindingService_init(soap->imode, soap->omode);

	soap_peek_element(soap);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "tev:PullMessages")) || (soap->action && !strcmp(soap->action, "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/PullMessagesRequest")))
		return serve___tev__PullMessages(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "tev:Seek")) || (soap->action && !strcmp(soap->action, "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SeekRequest")))
		return serve___tev__Seek(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "tev:SetSynchronizationPoint")) || (soap->action && !strcmp(soap->action, "http://www.onvif.org/ver10/events/wsdl/PullPointSubscription/SetSynchronizationPointRequest")))
		return serve___tev__SetSynchronizationPoint(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:Unsubscribe")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest")))
		return serve___tev__Unsubscribe(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "tev:GetServiceCapabilities")) || (soap->action && !strcmp(soap->action, "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetServiceCapabilitiesRequest")))
		return serve___tev__GetServiceCapabilities(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "tev:CreatePullPointSubscription")) || (soap->action && !strcmp(soap->action, "http://www.onvif.org/ver10/events/wsdl/EventPortType/CreatePullPointSubscriptionRequest")))
		return serve___tev__CreatePullPointSubscription(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "tev:GetEventProperties")) || (soap->action && !strcmp(soap->action, "http://www.onvif.org/ver10/events/wsdl/EventPortType/GetEventPropertiesRequest")))
		return serve___tev__GetEventProperties(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:Renew")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/RenewRequest")))
		return serve___tev__Renew(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:Unsubscribe")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/SubscriptionManager/UnsubscribeRequest")))
		return serve___tev__Unsubscribe_(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:Subscribe")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequest")))
		return serve___tev__Subscribe(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:GetCurrentMessage")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/GetCurrentMessageRequest")))
		return serve___tev__GetCurrentMessage(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:Notify")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/NotificationConsumer/Notify")))
		return serve___tev__Notify(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:GetMessages")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/PullPoint/GetMessagesRequest")))
		return serve___tev__GetMessages(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:DestroyPullPoint")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/PullPoint/DestroyPullPointRequest")))
		return serve___tev__DestroyPullPoint(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:Notify")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/PullPoint/Notify")))
		return serve___tev__Notify_(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:CreatePullPoint")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/CreatePullPoint/CreatePullPointRequest")))
		return serve___tev__CreatePullPoint(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:Renew")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest")))
		return serve___tev__Renew_(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:Unsubscribe")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest")))
		return serve___tev__Unsubscribe__(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:PauseSubscription")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest")))
		return serve___tev__PauseSubscription(soap, this);
	if ((!soap->action && !soap_match_tag(soap, soap->tag, "wsnt:ResumeSubscription")) || (soap->action && !strcmp(soap->action, "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest")))
		return serve___tev__ResumeSubscription(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___tev__PullMessages(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__PullMessages soap_tmp___tev__PullMessages;
	_tev__PullMessagesResponse tev__PullMessagesResponse;
	tev__PullMessagesResponse.soap_default(soap);
	soap_default___tev__PullMessages(soap, &soap_tmp___tev__PullMessages);
	if (!soap_get___tev__PullMessages(soap, &soap_tmp___tev__PullMessages, "-tev:PullMessages", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->PullMessages(soap_tmp___tev__PullMessages.tev__PullMessages, tev__PullMessagesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tev__PullMessagesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tev__PullMessagesResponse.soap_put(soap, "tev:PullMessagesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tev__PullMessagesResponse.soap_put(soap, "tev:PullMessagesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Seek(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Seek soap_tmp___tev__Seek;
	_tev__SeekResponse tev__SeekResponse;
	tev__SeekResponse.soap_default(soap);
	soap_default___tev__Seek(soap, &soap_tmp___tev__Seek);
	if (!soap_get___tev__Seek(soap, &soap_tmp___tev__Seek, "-tev:Seek", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Seek(soap_tmp___tev__Seek.tev__Seek, tev__SeekResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tev__SeekResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tev__SeekResponse.soap_put(soap, "tev:SeekResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tev__SeekResponse.soap_put(soap, "tev:SeekResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__SetSynchronizationPoint(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__SetSynchronizationPoint soap_tmp___tev__SetSynchronizationPoint;
	_tev__SetSynchronizationPointResponse tev__SetSynchronizationPointResponse;
	tev__SetSynchronizationPointResponse.soap_default(soap);
	soap_default___tev__SetSynchronizationPoint(soap, &soap_tmp___tev__SetSynchronizationPoint);
	if (!soap_get___tev__SetSynchronizationPoint(soap, &soap_tmp___tev__SetSynchronizationPoint, "-tev:SetSynchronizationPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetSynchronizationPoint(soap_tmp___tev__SetSynchronizationPoint.tev__SetSynchronizationPoint, tev__SetSynchronizationPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tev__SetSynchronizationPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tev__SetSynchronizationPointResponse.soap_put(soap, "tev:SetSynchronizationPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tev__SetSynchronizationPointResponse.soap_put(soap, "tev:SetSynchronizationPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Unsubscribe(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Unsubscribe soap_tmp___tev__Unsubscribe;
	_wsnt__UnsubscribeResponse wsnt__UnsubscribeResponse;
	wsnt__UnsubscribeResponse.soap_default(soap);
	soap_default___tev__Unsubscribe(soap, &soap_tmp___tev__Unsubscribe);
	if (!soap_get___tev__Unsubscribe(soap, &soap_tmp___tev__Unsubscribe, "-tev:Unsubscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Unsubscribe(soap_tmp___tev__Unsubscribe.wsnt__Unsubscribe, wsnt__UnsubscribeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__UnsubscribeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__GetServiceCapabilities(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__GetServiceCapabilities soap_tmp___tev__GetServiceCapabilities;
	_tev__GetServiceCapabilitiesResponse tev__GetServiceCapabilitiesResponse;
	tev__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___tev__GetServiceCapabilities(soap, &soap_tmp___tev__GetServiceCapabilities);
	if (!soap_get___tev__GetServiceCapabilities(soap, &soap_tmp___tev__GetServiceCapabilities, "-tev:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___tev__GetServiceCapabilities.tev__GetServiceCapabilities, tev__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tev__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tev__GetServiceCapabilitiesResponse.soap_put(soap, "tev:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tev__GetServiceCapabilitiesResponse.soap_put(soap, "tev:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__CreatePullPointSubscription(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__CreatePullPointSubscription soap_tmp___tev__CreatePullPointSubscription;
	_tev__CreatePullPointSubscriptionResponse tev__CreatePullPointSubscriptionResponse;
	tev__CreatePullPointSubscriptionResponse.soap_default(soap);
	soap_default___tev__CreatePullPointSubscription(soap, &soap_tmp___tev__CreatePullPointSubscription);
	if (!soap_get___tev__CreatePullPointSubscription(soap, &soap_tmp___tev__CreatePullPointSubscription, "-tev:CreatePullPointSubscription", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreatePullPointSubscription(soap_tmp___tev__CreatePullPointSubscription.tev__CreatePullPointSubscription, tev__CreatePullPointSubscriptionResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tev__CreatePullPointSubscriptionResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tev__CreatePullPointSubscriptionResponse.soap_put(soap, "tev:CreatePullPointSubscriptionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tev__CreatePullPointSubscriptionResponse.soap_put(soap, "tev:CreatePullPointSubscriptionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__GetEventProperties(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__GetEventProperties soap_tmp___tev__GetEventProperties;
	_tev__GetEventPropertiesResponse tev__GetEventPropertiesResponse;
	tev__GetEventPropertiesResponse.soap_default(soap);
	soap_default___tev__GetEventProperties(soap, &soap_tmp___tev__GetEventProperties);
	if (!soap_get___tev__GetEventProperties(soap, &soap_tmp___tev__GetEventProperties, "-tev:GetEventProperties", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetEventProperties(soap_tmp___tev__GetEventProperties.tev__GetEventProperties, tev__GetEventPropertiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tev__GetEventPropertiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tev__GetEventPropertiesResponse.soap_put(soap, "tev:GetEventPropertiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tev__GetEventPropertiesResponse.soap_put(soap, "tev:GetEventPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Renew(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Renew soap_tmp___tev__Renew;
	_wsnt__RenewResponse wsnt__RenewResponse;
	wsnt__RenewResponse.soap_default(soap);
	soap_default___tev__Renew(soap, &soap_tmp___tev__Renew);
	if (!soap_get___tev__Renew(soap, &soap_tmp___tev__Renew, "-tev:Renew", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Renew(soap_tmp___tev__Renew.wsnt__Renew, wsnt__RenewResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__RenewResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__RenewResponse.soap_put(soap, "wsnt:RenewResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__RenewResponse.soap_put(soap, "wsnt:RenewResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Unsubscribe_(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Unsubscribe_ soap_tmp___tev__Unsubscribe_;
	_wsnt__UnsubscribeResponse wsnt__UnsubscribeResponse;
	wsnt__UnsubscribeResponse.soap_default(soap);
	soap_default___tev__Unsubscribe_(soap, &soap_tmp___tev__Unsubscribe_);
	if (!soap_get___tev__Unsubscribe_(soap, &soap_tmp___tev__Unsubscribe_, "-tev:Unsubscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Unsubscribe_(soap_tmp___tev__Unsubscribe_.wsnt__Unsubscribe, wsnt__UnsubscribeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__UnsubscribeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Subscribe(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Subscribe soap_tmp___tev__Subscribe;
	_wsnt__SubscribeResponse wsnt__SubscribeResponse;
	wsnt__SubscribeResponse.soap_default(soap);
	soap_default___tev__Subscribe(soap, &soap_tmp___tev__Subscribe);
	if (!soap_get___tev__Subscribe(soap, &soap_tmp___tev__Subscribe, "-tev:Subscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Subscribe(soap_tmp___tev__Subscribe.wsnt__Subscribe, wsnt__SubscribeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__SubscribeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__SubscribeResponse.soap_put(soap, "wsnt:SubscribeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__SubscribeResponse.soap_put(soap, "wsnt:SubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__GetCurrentMessage(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__GetCurrentMessage soap_tmp___tev__GetCurrentMessage;
	_wsnt__GetCurrentMessageResponse wsnt__GetCurrentMessageResponse;
	wsnt__GetCurrentMessageResponse.soap_default(soap);
	soap_default___tev__GetCurrentMessage(soap, &soap_tmp___tev__GetCurrentMessage);
	if (!soap_get___tev__GetCurrentMessage(soap, &soap_tmp___tev__GetCurrentMessage, "-tev:GetCurrentMessage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetCurrentMessage(soap_tmp___tev__GetCurrentMessage.wsnt__GetCurrentMessage, wsnt__GetCurrentMessageResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__GetCurrentMessageResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__GetCurrentMessageResponse.soap_put(soap, "wsnt:GetCurrentMessageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__GetCurrentMessageResponse.soap_put(soap, "wsnt:GetCurrentMessageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Notify(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Notify soap_tmp___tev__Notify;
	soap_default___tev__Notify(soap, &soap_tmp___tev__Notify);
	if (!soap_get___tev__Notify(soap, &soap_tmp___tev__Notify, "-tev:Notify", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Notify(soap_tmp___tev__Notify.wsnt__Notify);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__GetMessages(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__GetMessages soap_tmp___tev__GetMessages;
	_wsnt__GetMessagesResponse wsnt__GetMessagesResponse;
	wsnt__GetMessagesResponse.soap_default(soap);
	soap_default___tev__GetMessages(soap, &soap_tmp___tev__GetMessages);
	if (!soap_get___tev__GetMessages(soap, &soap_tmp___tev__GetMessages, "-tev:GetMessages", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetMessages(soap_tmp___tev__GetMessages.wsnt__GetMessages, wsnt__GetMessagesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__GetMessagesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__GetMessagesResponse.soap_put(soap, "wsnt:GetMessagesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__GetMessagesResponse.soap_put(soap, "wsnt:GetMessagesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__DestroyPullPoint(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__DestroyPullPoint soap_tmp___tev__DestroyPullPoint;
	_wsnt__DestroyPullPointResponse wsnt__DestroyPullPointResponse;
	wsnt__DestroyPullPointResponse.soap_default(soap);
	soap_default___tev__DestroyPullPoint(soap, &soap_tmp___tev__DestroyPullPoint);
	if (!soap_get___tev__DestroyPullPoint(soap, &soap_tmp___tev__DestroyPullPoint, "-tev:DestroyPullPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DestroyPullPoint(soap_tmp___tev__DestroyPullPoint.wsnt__DestroyPullPoint, wsnt__DestroyPullPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__DestroyPullPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__DestroyPullPointResponse.soap_put(soap, "wsnt:DestroyPullPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__DestroyPullPointResponse.soap_put(soap, "wsnt:DestroyPullPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Notify_(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Notify_ soap_tmp___tev__Notify_;
	soap_default___tev__Notify_(soap, &soap_tmp___tev__Notify_);
	if (!soap_get___tev__Notify_(soap, &soap_tmp___tev__Notify_, "-tev:Notify", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Notify_(soap_tmp___tev__Notify_.wsnt__Notify);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__CreatePullPoint(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__CreatePullPoint soap_tmp___tev__CreatePullPoint;
	_wsnt__CreatePullPointResponse wsnt__CreatePullPointResponse;
	wsnt__CreatePullPointResponse.soap_default(soap);
	soap_default___tev__CreatePullPoint(soap, &soap_tmp___tev__CreatePullPoint);
	if (!soap_get___tev__CreatePullPoint(soap, &soap_tmp___tev__CreatePullPoint, "-tev:CreatePullPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreatePullPoint(soap_tmp___tev__CreatePullPoint.wsnt__CreatePullPoint, wsnt__CreatePullPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__CreatePullPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__CreatePullPointResponse.soap_put(soap, "wsnt:CreatePullPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__CreatePullPointResponse.soap_put(soap, "wsnt:CreatePullPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Renew_(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Renew_ soap_tmp___tev__Renew_;
	_wsnt__RenewResponse wsnt__RenewResponse;
	wsnt__RenewResponse.soap_default(soap);
	soap_default___tev__Renew_(soap, &soap_tmp___tev__Renew_);
	if (!soap_get___tev__Renew_(soap, &soap_tmp___tev__Renew_, "-tev:Renew", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Renew_(soap_tmp___tev__Renew_.wsnt__Renew, wsnt__RenewResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__RenewResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__RenewResponse.soap_put(soap, "wsnt:RenewResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__RenewResponse.soap_put(soap, "wsnt:RenewResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__Unsubscribe__(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__Unsubscribe__ soap_tmp___tev__Unsubscribe__;
	_wsnt__UnsubscribeResponse wsnt__UnsubscribeResponse;
	wsnt__UnsubscribeResponse.soap_default(soap);
	soap_default___tev__Unsubscribe__(soap, &soap_tmp___tev__Unsubscribe__);
	if (!soap_get___tev__Unsubscribe__(soap, &soap_tmp___tev__Unsubscribe__, "-tev:Unsubscribe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Unsubscribe__(soap_tmp___tev__Unsubscribe__.wsnt__Unsubscribe, wsnt__UnsubscribeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__UnsubscribeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__UnsubscribeResponse.soap_put(soap, "wsnt:UnsubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__PauseSubscription(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__PauseSubscription soap_tmp___tev__PauseSubscription;
	_wsnt__PauseSubscriptionResponse wsnt__PauseSubscriptionResponse;
	wsnt__PauseSubscriptionResponse.soap_default(soap);
	soap_default___tev__PauseSubscription(soap, &soap_tmp___tev__PauseSubscription);
	if (!soap_get___tev__PauseSubscription(soap, &soap_tmp___tev__PauseSubscription, "-tev:PauseSubscription", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->PauseSubscription(soap_tmp___tev__PauseSubscription.wsnt__PauseSubscription, wsnt__PauseSubscriptionResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__PauseSubscriptionResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__PauseSubscriptionResponse.soap_put(soap, "wsnt:PauseSubscriptionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__PauseSubscriptionResponse.soap_put(soap, "wsnt:PauseSubscriptionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tev__ResumeSubscription(struct soap *soap, PullPointSubscriptionBindingService *service)
{	struct __tev__ResumeSubscription soap_tmp___tev__ResumeSubscription;
	_wsnt__ResumeSubscriptionResponse wsnt__ResumeSubscriptionResponse;
	wsnt__ResumeSubscriptionResponse.soap_default(soap);
	soap_default___tev__ResumeSubscription(soap, &soap_tmp___tev__ResumeSubscription);
	if (!soap_get___tev__ResumeSubscription(soap, &soap_tmp___tev__ResumeSubscription, "-tev:ResumeSubscription", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ResumeSubscription(soap_tmp___tev__ResumeSubscription.wsnt__ResumeSubscription, wsnt__ResumeSubscriptionResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	wsnt__ResumeSubscriptionResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || wsnt__ResumeSubscriptionResponse.soap_put(soap, "wsnt:ResumeSubscriptionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || wsnt__ResumeSubscriptionResponse.soap_put(soap, "wsnt:ResumeSubscriptionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
